metadata {
  authority_id: alalc
  id: 2013
  language: iso-639-2:srp
  source_script: Cyrl
  destination_script: Latn
  name: ROMANIZATION OF SERBIAN, ALA-LC 2013 System
  url: https://www.loc.gov/catdir/cpso/romanization/serbian.pdf
  creation_date: 2013
  description: |
    Serbian uses the Cyrillic and Roman alphabets. When the Roman alphabet is used it is the same as Croatian.
}

tests {
  test "Шупља Стена", "Šuplja Stena"
  test "Чукарица", "Čukarica"
  test "Црна Трава", "Crna Trava"
  test "Херцег Нови", "Herceg Novi"
  test "Улцињ", "Ulcinj"
  test "Ужице", "Užice"
  test "Тресаначка Река", "Tresanačka Reka"
  test "Сјеница", "Sjenica"
  test "Рожаје", "Rožaje"
  test "Пљевља", "Pljevlja"
  test "Оџаци", "Odžaci"
  test "Никшић", "Nikšić"
  test "Медвеђа", "Medveđa"
  test "Лозница", "Loznica"
  test "Књажевац", "Knjaževac"
  test "Зрењанин", "Zrenjanin"
  test "Житорађа", "Žitorađa"
  test "Ервеник", "Ervenik"
  test "Доње Љупче", "Donje Ljupče"
  test "Гусиње", "Gusinje"
  test "ГУСИЊЕ", "GUSINJE"
  test "Врњачка Бања", "Vrnjačka Banja"
  test "Бијело Поље", "Bijelo Polje"
  test "Алибунар", "Alibunar"
}

# This map has been partially converted by the bin/maps_v1_to_v2 script
# The section below requires human attention. Remember to remove this
# comment and move the converted map to 'maps/' directory. Please also
# take note that the maps-staging directory will be cleaned up whenever
# you run the bin/maps_v1_to_v2 script. You should particularly be
# concerned about any regular expressions found in this file and about
# advanced expressions in parallel {} parts, and also about the order
# of particular parts of the stage.

stage {

  # POSTRULES
  #LJ
  #   #   #   sub capture(any([ :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop "Lj" + maybe( :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ), maybe( :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop ) + "Lj" :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ])), "LJ" # warning: :missing unimplemented # warning: :lookahead_start # warning: :
  #NJ
  #   #   #   sub capture(any([ :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop "Nj" + maybe( :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ), maybe( :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop ) + "Nj" :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ])), "NJ" # warning: :missing unimplemented # warning: :lookahead_start # warning: :
  #DŽ
  #   #   #   sub capture(any([ :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop "Dž" + maybe( :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ), maybe( :lookbehind_start any( :missing  Regexp::Expression::PosixClass ) :lookbehind_stop ) + "Dž" :lookahead_start any( :missing  Regexp::Expression::PosixClass ) :lookahead_stop ])), "DŽ" # warning: :missing unimplemented # warning: :lookahead_start # warning: :


  # CHARACTERS
  parallel {
    sub "А", "A"
    sub "Б", "B"
    sub "В", "V"
    sub "Г", "G"
    sub "Д", "D"
    sub "Ђ", "Đ" # Đ
    sub "Е", "E"
    sub "Ж", "Ž" # Ž
    sub "З", "Z"
    sub "И", "I"
    sub "Ј", "J"
    sub "К", "K"
    sub "Л", "L"
    sub "Љ", "Lj"
    sub "М", "M"
    sub "Н", "N"
    sub "Њ", "Nj"
    sub "О", "O"
    sub "П", "P"
    sub "Р", "R"
    sub "С", "S"
    sub "Т", "T"
    sub "Ћ", "Ć" # Ć
    sub "У", "U"
    sub "Ф", "F"
    sub "Х", "H"
    sub "Ц", "C"
    sub "Ч", "Č" # Č
    sub "Џ", "Dž" # Dž
    sub "Ш", "Š" # Š
    sub "а", "a"
    sub "б", "b"
    sub "в", "v"
    sub "г", "g"
    sub "д", "d"
    sub "ђ", "đ" # đ
    sub "е", "e"
    sub "ж", "ž" # ž
    sub "з", "z"
    sub "и", "i"
    sub "ј", "j"
    sub "к", "k"
    sub "л", "l"
    sub "љ", "lj"
    sub "м", "m"
    sub "н", "n"
    sub "њ", "nj"
    sub "о", "o"
    sub "п", "p"
    sub "р", "r"
    sub "с", "s"
    sub "т", "t"
    sub "ћ", "ć" # ć́
    sub "у", "u"
    sub "ф", "f"
    sub "х", "h"
    sub "ц", "c"
    sub "ч", "č" # č
    sub "џ", "dž" # dž
    sub "ш", "š" # š
  }

}

