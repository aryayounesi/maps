metadata {
  authority_id: alalc
  id: 2013
  language: iso-639-2:mkd
  source_script: Cyrl
  destination_script: Latn
  name: Makedonian Romanization, ALA-LC 2013 System
  url: https://www.loc.gov/catdir/cpso/romanization/macedonian.pdf
  creation_date: 2013
  description: ALA-LC Romanization table for Makedonian.
}

tests {
  test "Општина Ердут", "Opština Erdut"
  test "Општина Двор", "Opština Dvor"
  test "ЛУЃЕ луѓе", "LUǴE luǵe"
  test "ЅВЕЗДА ѕвезда Ѕвезда", "DZVEZDA dzvezda Dzvezda"
  test "ЌАРУВАЊЕ ќарување", "ḰARUVANJE ḱaruvanje"
}

# This map has been partially converted by the bin/maps_v1_to_v2 script
# The section below requires human attention. Remember to remove this
# comment and move the converted map to 'maps/' directory. Please also
# take note that the maps-staging directory will be cleaned up whenever
# you run the bin/maps_v1_to_v2 script. You should particularly be
# concerned about any regular expressions found in this file and about
# advanced expressions in parallel {} parts, and also about the order
# of particular parts of the stage.

stage {

  # POSTRULES
  # DZ
  #   #   sub capture(any([ :lookbehind_start any("[[:upper:]]") :lookbehind_stop "Dz" + maybe( :lookahead_start any("[[:upper:]]") :lookahead_stop ), maybe( :lookbehind_start any("[[:upper:]]") :lookbehind_stop ) + "Dz" :lookahead_start any("[[:upper:]]") :lookahead_stop ])), "DZ" # warning: : # warning: :lookahead_start
  #LJ
  #   #   sub capture(any([ :lookbehind_start any("[[:upper:]]") :lookbehind_stop "Lj" + maybe( :lookahead_start any("[[:upper:]]") :lookahead_stop ), maybe( :lookbehind_start any("[[:upper:]]") :lookbehind_stop ) + "Lj" :lookahead_start any("[[:upper:]]") :lookahead_stop ])), "LJ" # warning: : # warning: :lookahead_start
  #NJ
  #   #   sub capture(any([ :lookbehind_start any("[[:upper:]]") :lookbehind_stop "Nj" + maybe( :lookahead_start any("[[:upper:]]") :lookahead_stop ), maybe( :lookbehind_start any("[[:upper:]]") :lookbehind_stop ) + "Nj" :lookahead_start any("[[:upper:]]") :lookahead_stop ])), "NJ" # warning: : # warning: :lookahead_start
  #DŽ
  #   #   sub capture(any([ :lookbehind_start any("[[:upper:]]") :lookbehind_stop "Dž" + maybe( :lookahead_start any("[[:upper:]]") :lookahead_stop ), maybe( :lookbehind_start any("[[:upper:]]") :lookbehind_stop ) + "Dž" :lookahead_start any("[[:upper:]]") :lookahead_stop ])), "DŽ" # warning: : # warning: :lookahead_start


  # CHARACTERS
  parallel {
    sub "А", "A"
    sub "Б", "B"
    sub "В", "V"
    sub "Г", "G"
    sub "Ѓ", "Ǵ" # Ǵ
    sub "Д", "D"
    sub "Ђ", "Đ" # Đ
    sub "Е", "E"
    sub "Ж", "Ž" # Ž
    sub "З", "Z"
    sub "Ѕ", "Dz"
    sub "И", "I"
    sub "Ј", "J"
    sub "К", "K"
    sub "Ќ", "Ḱ" # Ḱ
    sub "Л", "L"
    sub "Љ", "Lj"
    sub "М", "M"
    sub "Н", "N"
    sub "Њ", "Nj"
    sub "О", "O"
    sub "П", "P"
    sub "Р", "R"
    sub "С", "S"
    sub "Т", "T"
    sub "У", "U"
    sub "Ф", "F"
    sub "Х", "H"
    sub "Ц", "C"
    sub "Ч", "Č" # Č
    sub "Џ", "Dž" # Dž
    sub "Ш", "Š" # Š
    sub "а", "a"
    sub "б", "b"
    sub "в", "v"
    sub "г", "g"
    sub "ѓ", "ǵ" # ǵ
    sub "д", "d"
    sub "ђ", "đ" # đ
    sub "е", "e"
    sub "ж", "ž" # ž
    sub "з", "z"
    sub "ѕ", "dz"
    sub "и", "i"
    sub "ј", "j"
    sub "к", "k"
    sub "ќ", "ḱ" # ḱ
    sub "л", "l"
    sub "љ", "lj"
    sub "м", "m"
    sub "н", "n"
    sub "њ", "nj"
    sub "о", "o"
    sub "п", "p"
    sub "р", "r"
    sub "с", "s"
    sub "т", "t"
    sub "у", "u"
    sub "ф", "f"
    sub "х", "h"
    sub "ц", "c"
    sub "ч", "č" # č
    sub "џ", "dž" # dž
    sub "ш", "š" # š
  }

}

