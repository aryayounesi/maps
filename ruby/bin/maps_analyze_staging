#!/usr/bin/env ruby
ENV["INTERSCRIPT_STAGING"] = "1"
require "bundler/setup"
require "interscript"
require "interscript/compiler/ruby"


# surpress warnings
def warn(*)
end

def analyze_maps( filelist )

cache = {}

good_total = 0
almost_total = 0
bad_total = 0
passed_total = 0
for i in filelist
  system_name = File.basename(i, ".imp")

  print "#{system_name}: "

  exceptions = []

  begin
    system = Interscript.parse(system_name)
  rescue => e
    exceptions << e
  end

  if exceptions.length == 0 && system.tests && system.tests.data && system.tests.data.length > 0
    good = 0
    bad = 0
    almost = 0

    system.tests.data.each do |from,expected|
      testname = from[0...300].gsub("\n", " / ")
      result = Interscript.transliterate(system_name, from, cache, compiler: Interscript::Interpreter)
      result2 = Interscript.transliterate(system_name, from, cache, compiler: Interscript::Compiler::Ruby)
      if result != result2
        # Compiler / Interpreter bug!
        print "!"
        bad += 1
      elsif result == expected
        print "."
        good += 1
      elsif result.unicode_normalize == expected.unicode_normalize
        print ","
        almost += 1
      else
        print "#"
        bad += 1
      end
    rescue => e
      print "%"
      bad += 1
      exceptions << e
    end

    if bad == 0
      passed_total += 1
      puts " all tests passed!"
      `git mv #{i} #{i.sub("-staging", "")}`   if i.include? '-staging'
    else
      puts " (#{good}/#{good+almost+bad})"
    end
    good_total += good
    almost_total += almost
    bad_total += bad
  elsif exceptions.length != 0
  else
    puts "no tests!"
  end

  exceptions.each do |e|
    puts e.full_message
  end
end
puts " #{good_total} (#{good_total+almost_total})/#{good_total+almost_total+bad_total}"
puts " #{passed_total} passed!"
end

analyze_maps Dir[__dir__+"/../../maps/maps/*.imp"].sort
analyze_maps Dir[__dir__+"/../../maps/maps-staging/*.imp"].sort